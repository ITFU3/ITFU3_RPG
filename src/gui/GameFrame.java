package gui;

import character.MonsterCharacter;
import gameHandler.KeyHandler;
import gameHandler.MonsterAI;
import gameHandler.MovementHandler;
import gui.GuiHelper.HealthBarLabel;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JComponent;
import main.Game;
import main.Map;

/**
 *
 * @author Steffen Haas
 * @author Matthias Dr√∂ge
 */
public class GameFrame extends javax.swing.JFrame {
    ArrayList<JComponent> components = new ArrayList<JComponent>();
    int testHp = Game.getInstance().getPlayer().getHealth();
    /**
     * Creates new form GameFrame
     */
    public GameFrame() {
        initComponents();
        initComponentList();
        
        this.addKeyListener(new KeyHandler());
        this.setLocationRelativeTo(null);
        
        arenaTextArea.setText( Map.getInstance().getMap());
        
        arenaTextArea.setEnabled(false);
        arenaTextArea.setDisabledTextColor(Color.BLACK);
        arenaTextArea.setFocusable(false);
        arenaTextArea.setFont( new java.awt.Font("Courier New", 0, 13) );
        
       // this.downButton.setFocusable(false);
        this.downButton.setText("Down");
        
        ((HealthBarLabel)playerHealthBarLabel).setHealthText(Game.getInstance().getPlayer().getHealth());
        
       // this.btn_EndRound.setFocusable(false);
        
        setButtonFocus(false);
        
        this.setVisible(true);
        
//        MonsterAI mAI = new MonsterAI(
//            (MonsterCharacter)Game.getInstance().getMonsters().get(0)
//        );
//        mAI.calcMovesToPlayer();
        
    }
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        arenaTextArea = new javax.swing.JTextArea();
        downButton = new javax.swing.JButton();
        btn_EndRound = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        playerHealthBarLabel = new HealthBarLabel(Game.getInstance().getPlayer().getHealth(), Game.getInstance().getPlayer().getTempHP());
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        arenaTextArea.setColumns(20);
        arenaTextArea.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        arenaTextArea.setRows(5);
        jScrollPane1.setViewportView(arenaTextArea);

        downButton.setText("Down");
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        btn_EndRound.setText("End Round");
        btn_EndRound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EndRoundActionPerformed(evt);
            }
        });

        jLabel1.setText("Player Health");

        playerHealthBarLabel.setText("");

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(171, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(downButton)
                        .addGap(338, 338, 338))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btn_EndRound)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playerHealthBarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(141, 141, 141))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(75, 75, 75))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_EndRound))
                .addGap(47, 47, 47)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(playerHealthBarLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(15, 15, 15)
                .addComponent(downButton)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        MovementHandler.down();
        Game.updateGUI();
    }//GEN-LAST:event_downButtonActionPerformed

    private void btn_EndRoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_EndRoundActionPerformed
        if( Game.getInstance().getMonsters().size() <= 0 ){
            Game.getInstance().nextLevel();
            System.out.println("NEXT LEVEL: " + Game.getInstance().getLevel());
        }else{
            //DoMonsters Turn HERE!!!
            
        }
        // Reset PLayerCharacter
        Game.getInstance().getPlayer().setAllowedMoves(
            Game.getInstance().getPlayer().getMovement()
        );
        Game.getInstance().getPlayer().setAllowedAttacks(1);
    }//GEN-LAST:event_btn_EndRoundActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       // reduce Player Health Test
        testHp = testHp-1;
        System.out.println(testHp);
        ((HealthBarLabel)playerHealthBarLabel).setHealthText(testHp);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea arenaTextArea;
    private javax.swing.JButton btn_EndRound;
    private javax.swing.JButton downButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel playerHealthBarLabel;
    // End of variables declaration//GEN-END:variables

    public javax.swing.JTextArea getArenaTextArea(){
        return arenaTextArea;
    }

    private void initComponentList() {
        components.add(arenaTextArea);
        components.add(downButton);
        components.add(btn_EndRound);
        components.add(jButton1);
    }
    
    public void setButtonFocus(boolean focus ) {
        for (JComponent component : components) {
            component.setFocusable(focus);
        }
    }
}